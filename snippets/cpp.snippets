snippet debugger
	#ifndef DEBUG_TEMPLATE_CPP
	#define DEBUG_TEMPLATE_CPP
	#include <bits/stdc++.h>
	// #define cerr cout
	namespace __DEBUG_UTIL__ {
	using namespace std;
	template <typename T>
	concept is_iterable =
	    requires(T &&x) { begin(x); } && !is_same_v<remove_cvref_t<T>, string>;
	void print(const char *x) { cerr << x; }
	void print(char x) { cerr << "\'" << x << "\'"; }
	void print(bool x) { cerr << (x ? "T" : "F"); }
	void print(string x) { cerr << "\"" << x << "\""; }
	void print(vector<bool> &v) { /* Overloaded this because stl optimizes
	                                 vector<bool> by using _Bit_reference instead of
	                                 bool to conserve space. */
	  int f = 0;
	  cerr << '{';
	  for (auto &&i : v)
	    cerr << (f++ ? "," : "") << (i ? "T" : "F");
	  cerr << "}";
	}
	template <typename T> void print(T &&x) {
	  if constexpr (is_iterable<T>)
	    if (size(x) &&
	        is_iterable<decltype(*(begin(x)))>) { /* Iterable inside Iterable */
	      int f = 0;
	      cerr << "\n~~~~~\n";
	      for (auto &&i : x) {
	        cerr << setw(2) << left << f++, print(i), cerr << "\n";
	      }
	      cerr << "~~~~~\n";
	    } else { /* Normal Iterable */
	      int f = 0;
	      cerr << "{";
	      for (auto &&i : x)
	        cerr << (f++ ? "," : ""), print(i);
	      cerr << "}";
	    }
	  else if constexpr (requires {
	                       x.pop();
	                     }) /* Stacks, Priority Queues, Queues */
	  {
	    auto temp = x;
	    int f = 0;
	    cerr << "{";
	    if constexpr (requires { x.top(); })
	      while (!temp.empty())
	        cerr << (f++ ? "," : ""), print(temp.top()), temp.pop();
	    else
	      while (!temp.empty())
	        cerr << (f++ ? "," : ""), print(temp.front()), temp.pop();
	    cerr << "}";
	  } else if constexpr (requires {
	                         x.first;
	                         x.second;
	                       }) /* Pair */
	  {
	    cerr << '(', print(x.first), cerr << ',', print(x.second), cerr << ')';
	  } else if constexpr (requires { get<0>(x); }) /* Tuple */
	  {
	    int f = 0;
	    cerr << '(', apply(
	                     [&f](auto... args) {
	                       ((cerr << (f++ ? "," : ""), print(args)), ...);
	                     },
	                     x);
	    cerr << ')';
	  } else
	    cerr << x;
	}
	template <typename T, typename... V>
	void printer(const char *names, T &&head, V &&...tail) {
	  int i = 0;
	  for (size_t bracket = 0;
	       names[i] != '\0' and (names[i] != ',' or bracket != 0); i++)
	    if (names[i] == '(' or names[i] == '<' or names[i] == '{')
	      bracket++;
	    else if (names[i] == ')' or names[i] == '>' or names[i] == '}')
	      bracket--;
	  cerr.write(names, i) << " = ";
	  print(head);
	  if constexpr (sizeof...(tail))
	    cerr << " ||", printer(names + i + 1, tail...);
	  else
	    cerr << "]\n";
	}
	template <typename T, typename... V>
	void printerArr(const char *names, T arr[], size_t N, V... tail) {
	  size_t i = 0;
	  for (; names[i] and names[i] != ','; i++)
	    cerr << names[i];
	  for (i++; names[i] and names[i] != ','; i++)
	    ;
	  cerr << " = {";
	  for (size_t ind = 0; ind < N; ind++)
	    cerr << (ind ? "," : ""), print(arr[ind]);
	  cerr << "}";
	  if constexpr (sizeof...(tail))
	    cerr << " ||", printerArr(names + i + 1, tail...);
	  else
	    cerr << "]\n";
	}
	
	} // namespace __DEBUG_UTIL__
	#ifndef ONLINE_JUDGE
	#define debug(...)                                                             \
	  std::cerr << __LINE__ << ": [",                                              \
	      __DEBUG_UTIL__::printer(#__VA_ARGS__, __VA_ARGS__)
	#define debugArr(...)                                                          \
	  std::cerr << __LINE__ << ": [",                                              \
	      __DEBUG_UTIL__::printerArr(#__VA_ARGS__, __VA_ARGS__)
	#else
	#define debug(...)
	#define debugArr(...)
	#endif
	#endif
	
snippet DSU
    class DSU {
        
        public:
          vector<int> par, sz;
          DSU(int n) : par(n), sz(n, 1) { 
            iota(par.begin(), par.end(), 0);
          }
        
          int find(int x) { return par[x] == x ? x : (par[x] = find(par[x])); }
        
          bool unite(int x, int y) {
            int root_x = find(x), root_y = find(y);
            if (root_x == root_y)
              return 0;
        
            if (sz[root_x] < sz[root_y])
              swap(root_x, root_y);
        
            sz[root_x] += sz[root_y];
            par[root_y] = root_x;
            return 1;
          }
        
          bool sameSet(int x, int y) { return find(x) == find(y); }
        
          int size(int x) { return sz[find(x)]; }
    };

      

snippet phoenix
    
    
                                         // ॐ
    
    
    #include <bits/stdc++.h>
    #include <ext/pb_ds/assoc_container.hpp>
    #include <ext/pb_ds/tree_policy.hpp>
    
    using namespace std;
    using namespace __gnu_pbds;
    
    /* DEBUGGER */
    #ifndef ONLINE_JUDGE
    #include "debugger.h"
    #else
    #define debug(x...)
    #define debugArr(arr, n)
    #endif
    
    /* TYPES */
    #define ff first
    #define ss second
    #define ll long long 
    #define ull unsigned long long 
    #define ldb long double
    #define pii pair<int, int>
    #define pll pair<long long, long long>
    #define vi vector<int>
    #define vll vector<long long>
    #define vc vector<char>
    #define mii map<int, int>
    #define si set<int>
    #define sc set<char>
    
    /* PB-DS */
    template <typename T>
    using oset = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
    
    /* FUNCTIONS */
    #define f(i,s,e) for(ll  i=s;i<e;i++)
    #define cf(i,s,e) for(ll  i=s;i<=e;i++)
    #define rf(i,e,s) for(ll  i=e-1;i>=s;i--)
    #define all(v) v.begin(),v.end()
    #define rall(v) v.rbegin(),v.rend()
    #define pb push_back
    #define eb emplace_back
    
    /* UTILS */
    #define MOD 1000000007
    #define PI 3.1415926535897932384626433832795
    #define read(type) readInt<type>()
    inline ll fact(int n) { ll result = 1; for (int i = 1; i <= n; ++i) result = ((result)*(i)); return result; }
    // inline ll gcd(ll a,ll b) { if (b==0) return a; return gcd(b, a%b); }
    inline string to_upper(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='a' && a[i]<='z') a[i]-='a'-'A'; return a; }
    inline string to_lower(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='A' && a[i]<='Z') a[i]+='a'-'A'; return a; }
    inline bool prime(ll a) { if (a==1) return 0; for (int i=2;i<=round(sqrt(a));++i) if (a%i==0) return 0; return 1; }
    inline void yes() { cout<<"YES\n"; }
    inline void no() { cout<<"NO\n"; }
    inline int numberWithLastSetBit(ll n){return (n&(~(n-1)));}
    #define int long long
    
    // ------------------------------------------------------------------------------------------------------------------------
    
    void solve(){
    
    	${1:start} 
    
    }
    
    // ------------------------------------------------------------------------------------------------------------------------
    
    signed main(){
    
      #ifndef ONLINE_JUDGE
        freopen("ipf.in","r",stdin); 
        freopen("opf.in","w",stdout);
        freopen("error.txt", "w", stderr);
      #endif
    
      ios_base::sync_with_stdio(false); 
      cin.tie(NULL);
      
      int t = 1;
      cin>>t; 
      while(t--){
        cerr<<t<<" --- "<<endl;
        solve();
      }
    
      return 0; 
    }






