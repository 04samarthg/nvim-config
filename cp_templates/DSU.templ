class DSU {
    
    public:
      vector<int> par, sz;
      DSU(int n) : par(n), sz(n, 1) { 
        iota(par.begin(), par.end(), 0);
      }
    
      int find(int x) { return par[x] == x ? x : (par[x] = find(par[x])); }
    
      bool unite(int x, int y) {
        int root_x = find(x), root_y = find(y);
        if (root_x == root_y)
          return 0;
    
        if (sz[root_x] < sz[root_y])
          swap(root_x, root_y);
    
        sz[root_x] += sz[root_y];
        par[root_y] = root_x;
        return 1;
      }
    
      bool sameSet(int x, int y) { return find(x) == find(y); }
    
      int size(int x) { return sz[find(x)]; }
};
